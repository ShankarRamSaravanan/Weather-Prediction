# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HM3NH_juQ81UGJLQUALEjBEoO8FO0_tO

<H1><center> Data intensive computing project</center></H1>

<h3> Importing the Required Libraries </h3>รง
"""

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams
import plotly.graph_objects as go

from pandas.plotting import autocorrelation_plot
from pandas.plotting import lag_plot
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import statsmodels.api as sm
import plotly.figure_factory as ff
import pandas as pd

import matplotlib.pyplot as plt
import streamlit as st
from plotly.subplots import make_subplots

"""Reading the Data - Weather Data
"""


"""<h1><center> Exploratory Data Analysis <center><h1>"""

eda_graphs = {}

def run_eda(weather):
    describe_data(weather)
    plot_rolling_avg_temp(weather)
    plot_rolling_avg_min_temp(weather)
    plot_rolling_avg_max_temp(weather)
    plot_rolling_avg_snowfall(weather)
    plot_rolling_avg_prcp(weather)
    plot_co2_over_years(weather)
    plot_tsi_over_years(weather)
    return eda_graphs

def describe_data(weather):
    weather.describe()

    mean = weather["SNOW"].mean()
    sd = weather["SNOW"].std()
    weather = weather[(weather["SNOW"] <= mean+(3*sd))]
    weather.describe()

def plot_co2_over_years(weather):
    """<h3> Analyzing CO2 over the years </h3>"""
    rcParams['figure.figsize'] = 20.7,15.27 
    fig= go.Figure(data=[go.Scatter(
        x = weather['DATE'] ,
        y = weather['CO2'],
        stackgroup='one',line_color='#147852')
    ])
    fig.update(layout_yaxis_range = [300,430])
    eda_graphs["CO2 concentration over the years"] = fig

def plot_tsi_over_years(weather):
    """<h3> Analyzing TSI value over the years </h3>"""

    rcParams['figure.figsize'] = 20.7,15.27 
    fig= go.Figure(data=[go.Scatter(
        x = weather['DATE'],
        y = weather['TSI'],
        line_color='#C4451C')
    ])
    fig.update(layout_yaxis_range = [1350,1370])
    eda_graphs["Total Solar Irradiation over the years"] = fig

def plot_rolling_avg_temp(weather):
    """<h3> Plotting rolling average of average temperature over the years </h3>"""

    Rolling_avg=pd.DataFrame(weather.groupby("Year")["TAVG"].mean())
    fig = go.Figure(data=go.Scatter( x=Rolling_avg.index, y=Rolling_avg["TAVG"],mode='lines+markers',)
    ).update_layout(
        xaxis_title="YEAR", yaxis_title="TAVG(Celsius)"
    )
    eda_graphs["Rolling average of average temperature (TAVG) over the years"] = fig

def plot_bimodel_distribution(weather):
    """<h3> Bimodel Distribution</h3>"""

    hist_data = [weather['TMAX'],weather['TMIN'], weather['TAVG']]
    group_labels = ['MAX TEMP', 'MIN TEMP', 'AVG TEMP']

    fig = ff.create_distplot(hist_data, group_labels, bin_size=.4)
    eda_graphs["Bimodel Distribution"] = fig

    """The above shows the distribution for three catergory of temparture, With this we can bring up lot of statistics like the mean, standard deviation Maximum temperature rate, minimum temparate rate."""

def plot_rolling_avg_min_temp(weather):
    Rolling_avg=pd.DataFrame(weather.groupby("Year")["TMIN"].mean())
    fig = go.Figure(data=go.Scatter( x=Rolling_avg.index, y=Rolling_avg["TMIN"],mode='lines+markers',)
    ).update_layout(
        xaxis_title="YEAR", yaxis_title="TMIN(Celsius)"
    )
    eda_graphs["Rolling average of minumum temperature (TMIN) over the years"] = fig

def plot_rolling_avg_max_temp(weather):
    Rolling_avg=pd.DataFrame(weather.groupby("Year")["TMAX"].mean())
    fig = go.Figure(data=go.Scatter( x=Rolling_avg.index, y=Rolling_avg["TMAX"],mode='lines+markers',)
    ).update_layout(
        xaxis_title="YEAR", yaxis_title="TMAX(Celsius)"
    )
    eda_graphs["Rolling average of temperature (TMAX) over the years"] = fig

def plot_rolling_avg_snowfall(weather):
    """<h3> Plotting rolling average of snowfall over the years </h3>"""

    Rolling_avg=pd.DataFrame(weather.groupby("Year")["SNOW"].mean())
    fig = go.Figure(data=go.Scatter( x=Rolling_avg.index, y=Rolling_avg["SNOW"],mode='lines+markers',)
    ).update_layout(
        xaxis_title="YEAR", yaxis_title="SNOW(INCHES)"
    )

    eda_graphs["Rolling average snowfall over the years"] = fig

def plot_rolling_avg_prcp(weather):
    """<h3> Plotting rolling average of precipitation over multiple years (left) and over a single year (right) </h3>"""

    Rolling_avg=pd.DataFrame(weather.groupby("Year")["PRCP"].mean())
    fig, axes = plt.subplots(1, 2, figsize=(15, 6))
    sns.lineplot(x=weather['DATE'].dt.year, y=weather['PRCP'] , data = weather, ax=axes[0])
    sns.lineplot(x=weather['DATE'].dt.month, y=weather['PRCP'], data = weather, ax = axes[1])
    eda_graphs["Rolling average of precipitation over the years (left) and months(right)"] = fig

def plot_auto_correlation_co2(weather):
    """<h3> Auto-correlation </h3>
    Auto correlation and partial auto correlation function for CO2
    """

    fig, axes = plt.subplots(1, 2, figsize=(15, 6))

    lag_plot(weather["CO2"],ax=axes[0])
    autocorrelation_plot(weather['CO2'], ax=axes[1])

    """The first subplot tells us that there is a strong relationship between T and its first lag(t+1). The second subplot represents that there is a positive correlation between t and (t+1) till lag number 9500 and even the correlation drops gradually."""

    fig, axes = plt.subplots(1, 2, figsize=(15, 6))
    plot_acf(weather['CO2'], lags=20000, use_vlines=False,ax=axes[0])
    plot_pacf(weather['CO2'], lags=300, use_vlines=False, method ='ywm',ax=axes[1])
    eda_graphs["Auto-correlation and partial correlation part of CO2"] = fig

    """The first subplot represents the correlation rate of all the lags between t and t+1. It shows that till lag no 2500 the correlation between t and t+1 is significant which means we can predict the present instance with instance that goes till 2500. However, the part of the line that exists in the blue zone(95% confidence interval) would be insignificant and  we cannot predict anything  about the present instance with those lags.
    In partial correlation plot we can see very few lag values that have significant correlation with which we can predict the present instance.
    """

    sm.tsa.acf(weather['CO2'], nlags=10)
    # First ten lags and their correlation value from  lag 1 to lag 10
    # where we could a gradual decrement in the value of lag

def plot_auto_correlation_tsi(weather):
    """Auto correlation  and partial auto correlation function for total solar irradiance"""

    fig, axes = plt.subplots(1, 2, figsize=(15, 6))

    lag_plot(weather["TSI"],ax=axes[0])
    autocorrelation_plot(weather['TSI'], ax=axes[1])

    """The first subplot plot says that y(t)- previous instance and y(t+1) Present instance have a scattered linear relationship
    """

    fig, axes = plt.subplots(1, 2, figsize=(15, 6))
    plot_acf(weather['TSI'], lags=2000, use_vlines=False,ax=axes[0])
    plot_pacf(weather['TSI'], lags=100, use_vlines=False, method ='ywm',ax=axes[1])
    eda_graphs["Auto-correlation and partial correlation part of TSI"] = fig

    """The first subplot represent the correlation rate of all the lags between t and t+1. It shows that till lag no 750 the correlation between t and t+1 is significant which means we can predict the present instance with instance that goes from 0 till 750. However line that exist in the blue zone(95% confidence interval) would be insignificant and  we cannot predict anything  about the present instance with those lags. Since very few has considerable correlation value. Apart from that, all have a correlation rate which is near to 0.
    In partial correlation plot we can see very few lag values that have significant correlation with which we can predict the present instance.
    """

def plot_prcp_over_years(weather):
    WEATHER_SEASON_WINTER=weather[weather["SEASON"] == 4]
    WEATHER_SEASON_FALL=weather[weather["SEASON"] == 3]
    WEATHER_SEASON_SUMMER=weather[weather["SEASON"] == 2]
    WEATHER_SEASON_SPRING=weather[weather["SEASON"] == 1]

    first_plot = go.Scatter( x=WEATHER_SEASON_SPRING["DATE"], y=WEATHER_SEASON_SPRING["PRCP"])
    second_plot = go.Scatter( x=WEATHER_SEASON_FALL["DATE"], y=WEATHER_SEASON_FALL["PRCP"])
    third_plot = go.Scatter( x=WEATHER_SEASON_WINTER["DATE"], y=WEATHER_SEASON_WINTER["PRCP"])
    fourth_plot = go.Scatter( x=WEATHER_SEASON_SUMMER["DATE"], y=WEATHER_SEASON_SUMMER["PRCP"])

    fig = make_subplots(rows=2, cols=2, shared_yaxes=True)
    fig.add_trace(first_plot, row=1, col=1)

    fig.add_trace(second_plot, row=1, col=2)
    fig.add_trace(third_plot, row=2, col=1)
    fig.add_trace(fourth_plot, row=2, col=2)

    layout = {
        "xaxis1": {
            "title": "YEAR(SEASON : SPRING)",
        },
        "yaxis1": {
            "title": "PRCP"
        },
        
        "xaxis2":{
            "title": "YEAR(SEASON : FALL)"
        },
        "yaxis2":{
            "title":"PRCP"
        },
        "xaxis3": {
            "title": "YEAR(SEASON : WINTER)",
        },
        "yaxis3": {
            "title": "PRCP"
        },
        
        "xaxis4":{
            "title": "YEAR(SEASON : SUMMER)"
        },
        "yaxis4":{
            "title":"PRCP"
        }
    }

    fig.update_layout(layout)
    eda_graphs["Precipitation against seasons over the years"] = fig

